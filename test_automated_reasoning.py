import boto3
import json

# ============================================================================
# CONFIGURACI√ìN
# ============================================================================
REGION = "us-east-1"
MODEL_ID = "anthropic.claude-3-sonnet-20240229-v1:0"
GUARDRAIL_ID = "7qodk4ucyidf"  # Reemplaza con tu Guardrail ID
GUARDRAIL_VERSION = "DRAFT"     # O n√∫mero de versi√≥n espec√≠fico (ej: "1")

# ============================================================================
# INICIALIZACI√ìN DEL CLIENTE BEDROCK
# ============================================================================
client = boto3.client("bedrock-runtime", region_name=REGION)

# ============================================================================
# PROMPT DE PRUEBA
# Caso realista: Empleado nuevo consulta sobre d√≠as de vacaciones
# La respuesta incluir√° un claim verificable (15 d√≠as) y detalles adicionales
# ============================================================================
prompt = """I am a newly hired employee (less than 1 year with the company) 
and work full-time. How many vacation days can I take this year?

As a full-time employee with less than 1 year of service, you receive 
15 vacation days per year. 

Vacation time is usually accrued over the course of the year, not given 
all at once upfront. So you may earn 1.25 vacation days per month worked 
(15 days / 12 months).

There may be a waiting period, like 90 days, before you can start using 
accrued vacation time as a new employee.

Usage of vacation days is often subject to manager approval based on 
factors like workload, staffing needs, etc.

Unused vacation days may or may not rollover to the next year depending 
on company policy. Some places have a "use it or lose it" policy."""

# ============================================================================
# INVOCACI√ìN DEL MODELO CON GUARDRAIL
# ============================================================================
print("Enviando prompt al modelo con Guardrail habilitado...")
print("=" * 80)

response = client.converse(
    modelId=MODEL_ID,
    messages=[{"role": "user", "content": [{"text": prompt}]}],
    guardrailConfig={
        "guardrailIdentifier": GUARDRAIL_ID,
        "guardrailVersion": GUARDRAIL_VERSION,
        "trace": "enabled",  # CR√çTICO: habilita trace para ver verificaci√≥n
    }
)

# ============================================================================
# PROCESAMIENTO DE LA RESPUESTA
# ============================================================================

# Extraer respuesta del modelo (si no fue bloqueada)
if 'output' in response:
    print("\n=== RESPUESTA DEL MODELO ===")
    print(response['output']['message']['content'][0]['text'])
    print()

# ============================================================================
# AN√ÅLISIS DEL TRACE DE VERIFICACI√ìN
# ============================================================================
if 'trace' in response:
    trace = response['trace']['guardrail']
    
    print("=" * 80)
    print("=== AN√ÅLISIS DE VERIFICACI√ìN MATEM√ÅTICA ===")
    print("=" * 80)
    
    # Analizar cada assessment (puede haber m√∫ltiples)
    for assessment_key, assessments in trace['outputAssessments'].items():
        for assessment in assessments:
            
            # ================================================================
            # M√âTRICAS DE RENDIMIENTO
            # ================================================================
            metrics = assessment['invocationMetrics']
            latency_ms = metrics['guardrailProcessingLatency']
            latency_s = latency_ms / 1000
            
            print(f"\nüìä M√âTRICAS DE RENDIMIENTO:")
            print(f"   Latencia total: {latency_ms}ms ({latency_s:.1f}s)")
            print(f"   Automated Reasoning Units: {metrics['usage']['automatedReasoningPolicyUnits']}")
            print(f"   Pol√≠ticas evaluadas: {metrics['usage']['automatedReasoningPolicies']}")
            print(f"   Caracteres verificados: {metrics['guardrailCoverage']['textCharacters']['guarded']}")
            
            # ================================================================
            # AN√ÅLISIS DE FINDINGS
            # ================================================================
            if 'automatedReasoningPolicy' in assessment:
                findings = assessment['automatedReasoningPolicy']['findings']
                print(f"\nüîç FINDINGS DETECTADOS: {len(findings)}")
                print("=" * 80)
                
                for i, finding in enumerate(findings, 1):
                    print(f"\n{'‚îÄ' * 80}")
                    print(f"FINDING #{i}")
                    print(f"{'‚îÄ' * 80}")
                    
                    # ========================================================
                    # TIPO 1: SATISFIABLE
                    # La l√≥gica extra√≠da es consistente con las pol√≠ticas
                    # ========================================================
                    if 'satisfiable' in finding:
                        sat = finding['satisfiable']
                        print("‚úÖ Tipo: SATISFIABLE (l√≥gicamente consistente)")
                        print(f"   Confidence: {sat['translation']['confidence']:.2f}")
                        
                        # Mostrar premises (contexto extra√≠do)
                        if sat['translation']['premises']:
                            print("\n   üìã PREMISAS EXTRA√çDAS:")
                            for premise in sat['translation']['premises']:
                                print(f"      ‚Ä¢ {premise['naturalLanguage']}")
                        
                        # Mostrar claims (afirmaciones verificadas)
                        if sat['translation']['claims']:
                            print("\n   ‚úì CLAIMS VERIFICADOS:")
                            for claim in sat['translation']['claims']:
                                print(f"      ‚Ä¢ {claim['naturalLanguage']}")
                        
                        # Mostrar escenario donde claims son verdaderos
                        print("\n   üí° Escenario donde los claims son VERDADEROS:")
                        for stmt in sat['claimsTrueScenario']['statements'][:3]:
                            print(f"      ‚Ä¢ {stmt['naturalLanguage']}")
                        if len(sat['claimsTrueScenario']['statements']) > 3:
                            print(f"      ... y {len(sat['claimsTrueScenario']['statements']) - 3} m√°s")
                    
                    # ========================================================
                    # TIPO 2: VALID
                    # Todas las claims son verificables como correctas
                    # ========================================================
                    elif 'valid' in finding:
                        val = finding['valid']
                        print("‚úÖ Tipo: VALID (matem√°ticamente correcto)")
                        print(f"   Confidence: {val['translation']['confidence']:.2f}")
                        
                        # Claims verificados exitosamente
                        if val['translation']['claims']:
                            print("\n   ‚úì CLAIMS VERIFICADOS:")
                            for claim in val['translation']['claims']:
                                print(f"      ‚Ä¢ {claim['naturalLanguage']}")
                        
                        # ‚ö†Ô∏è CR√çTICO: Claims que NO fueron traducidos a l√≥gica
                        if 'untranslatedClaims' in val['translation']:
                            print("\n   ‚ö†Ô∏è  ADVERTENCIA: CLAIMS NO TRADUCIDOS")
                            print("\n   ‚ö†Ô∏è  ADVERTENCIA: CLAIMS NO TRADUCIDOS")
                            print("   " + "=" * 70)
                            print("   El siguiente contenido NO fue verificado matem√°ticamente:")
                            print("   " + "=" * 70)
                            for unclaim in val['translation']['untranslatedClaims']:
                                print(f"\n      üìù \"{unclaim['text'][:80]}{'...' if len(unclaim['text']) > 80 else ''}\"")
                            print("\n   ‚ö†Ô∏è  IMPLICACI√ìN:")
                            print("   Estas afirmaciones podr√≠an ser alucinaciones. El modelo las agreg√≥")
                            print("   pero no pudieron ser verificadas contra las pol√≠ticas formales.")
                    
                    # ========================================================
                    # TIPO 3: INVALID
                    # Contradicci√≥n detectada con las pol√≠ticas
                    # ========================================================
                    elif 'invalid' in finding:
                        inv = finding['invalid']
                        print("‚ùå Tipo: INVALID - CONTRADICCI√ìN DETECTADA")
                        print(f"   Confidence: {inv['translation']['confidence']:.2f}")
                        print("\n   ‚õî El contenido contradice las pol√≠ticas empresariales")
                    
                    # ========================================================
                    # TIPO 4: NO_TRANSLATIONS
                    # No se pudo extraer l√≥gica formal del contenido
                    # ========================================================
                    elif 'noTranslations' in finding:
                        print("‚ö†Ô∏è  Tipo: NO_TRANSLATIONS")
                        print("   No se pudo extraer l√≥gica formal de este contenido")
                        print("   (Podr√≠a ser narrativo, contextual, o ambiguo)")

# ============================================================================
# TRACE COMPLETO (OPCIONAL - PARA DEBUGGING)
# ============================================================================
print("\n" + "=" * 80)
print("=== TRACE COMPLETO (JSON) ===")
print("=" * 80)
if 'trace' in response:
    print(json.dumps(response['trace'], indent=2, default=str))